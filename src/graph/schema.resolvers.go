package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"

	"github.com/glimpzio/backend/auth"
	"github.com/glimpzio/backend/graph/model"
	"github.com/glimpzio/backend/profile"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	middleware := auth.GetMiddleware(ctx)
	if middleware.Token == nil {
		return nil, auth.ErrMissingAuthHeader
	}

	user, err := r.ProfileService.NewUser(middleware.Token, &profile.NewUser{Name: input.Name, PersonalEmail: input.Email, Bio: input.Bio, Profile: profile.Profile{Email: input.Profile.Email, Phone: input.Profile.Phone, Website: input.Profile.Website, Linkedin: input.Profile.Linkedin}})

	if err != nil {
		return nil, err
	}

	return &model.User{ID: user.Id, Name: user.Name, Email: user.Email, Bio: user.Bio, Profile: &model.Profile{Email: user.Profile.Email, Phone: user.Profile.Phone, Website: user.Profile.Website, Linkedin: user.Profile.Linkedin}}, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	middleware := auth.GetMiddleware(ctx)
	if middleware.Token == nil {
		return nil, auth.ErrMissingAuthHeader
	}

	user := r.ProfileService.GetUser(middleware.Token, id)

	if user == nil {
		return nil, nil
	}

	return &model.User{ID: user.Id, Name: user.Name, Email: user.Email, Bio: user.Bio, Profile: &model.Profile{Email: user.Profile.Email, Phone: user.Profile.Phone, Website: user.Profile.Website, Linkedin: user.Profile.Linkedin}}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
